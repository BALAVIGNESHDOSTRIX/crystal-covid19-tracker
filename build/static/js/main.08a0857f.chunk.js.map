{"version":3,"sources":["components/InfoBoxes.js","components/Table.js","utils/tools.js","components/LineGraphs.js","components/Map.js","components/App.js","utils/serviceWorker.js","index.js"],"names":["InfoBoxes","active","isRed","title","cases","total","props","Card","className","onClick","CardContent","Typography","color","gutterBottom","Table","countries","map","country","numeral","format","sortData","data","sort","a","b","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","constructChartD","lastDatapoint","extractype","chardata","date","newdatapoint","x","y","push","LineGraphs","useState","lineData","setLineData","graph_optins","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","useEffect","fetch","then","response","json","cons_graph_data","fetchData","backgroundoptions","backcolor","borderclr","length","options","datasets","backgroundColor","borderColor","Map","casesType","center","zoom","console","log","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","showMapData","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setmapCountries","CasesType","setCasesType","name","iso2","sorted_d","getAllCountries","Onchange","event","countrycode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayDeaths","todayRecovered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08a0857f.chunk.js","sourcesContent":["import React from 'react'\nimport {Card, CardContent, Typography } from '@material-ui/core';\nimport \"../css/Info.css\";\n\nfunction InfoBoxes({active, isRed, title, cases, total, ...props}) {\n    return (\n        <Card className={`infoboxes ${active && \"infoboxes--selected\"} ${isRed && \"infoboxes--red\"}`}\n           onClick={props.onClick}>\n            <CardContent>\n                {/* Title */}\n                <Typography color=\"textSecondary\" className=\"infoboxes__title\" gutterBottom>\n                    {title}\n                </Typography>\n\n                {/* Number of Cases */}\n                <h1 className={`infoboxes__no_cases ${!isRed && \"infoboxes__no_cases--green\"}`}>{cases}</h1>\n                {/* 1.2M Total */}\n                <Typography color=\"textSecondary\" className=\"infoboxes__total\">\n                    {total} Total\n                </Typography>\n\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBoxes\n","import React from 'react';\nimport \"../css/Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {\n                countries.map(country => (\n                    <tr>\n                        <td>{country.country}</td>\n                        <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\n                    </tr>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Table\n","import {Circle, Popup, Marker} from 'react-leaflet';\nimport React from 'react';\nimport numeral from 'numeral';\n\nexport const sortData = (data) => {\n    return [...data].sort((a,b) => (a.cases > b.cases ? -1: 1));\n}\n\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        multiplier: 500\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multiplier: 2000,\n    }\n}\n\n\n//Draw the Circles on the Map\nexport const showMapData = (data, casesType=\"cases\") => \n    data.map((country) => (\n        <Circle\n        center={[country.countryInfo.lat,country.countryInfo.long]}\n        fillOpacity={0.2}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        radius={\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n        }\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div\n                    className=\"info-flag\"\n                    style={{backgroundImage: `url(${country.countryInfo.flag})`}} />\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-cases\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n\n        </Circle>\n    ));\n\n\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React, {useState, useEffect} from 'react'\nimport {Line} from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n\nconst constructChartD = (data, extractype='cases') => {\n    const chardata = [];\n    let lastDatapoint;\n\n    for(let date in data.cases) {\n        if(lastDatapoint){\n            const newdatapoint = {\n                x : date,\n                y : data[extractype][date] - lastDatapoint\n            }\n            chardata.push(newdatapoint);\n        }\n        else{\n            lastDatapoint = data[extractype][date];\n        }\n    }\n\n    return chardata;\n\n}\n\nfunction LineGraphs({extractype=\"cases\", ...props}) {\n    const [lineData, setLineData] = useState({});\n\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=150\n\nconst graph_optins = {\n    legend: {\n        display: false\n    }, \n    elements: {\n        point: {\n            radius: 0\n        }\n    },\n\n    maintainAspectRatio: false,\n\n    tooltips: {\n        mode: \"index\", \n        intersect: false,\n        callbacks: {\n            label: function(tooltipItem, data){\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            }\n        }\n    },\n\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat:\"ll\",\n                }\n            }\n        ],\n        yAxes: [\n            {\n                gridLines:{\n                    display: false,\n                },\n                ticks: {\n                    callback: function(value, index, values){\n                        return numeral(value).format(\"0a\");\n                    }\n                }\n            }\n        ]\n    }\n}\n\n\n\n\n\nuseEffect(() => {\n    const fetchData = async() => {\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=150\").then(response => response.json())\n        .then((data) => {\n\n            const cons_graph_data = constructChartD(data, extractype=extractype);\n            setLineData(cons_graph_data);\n\n        });\n    }\n\n    fetchData();\n}, [extractype]);\n\n\nconst backgroundoptions = {\n    cases: {\n        backcolor: \"#FF0266\",\n        borderclr: \"#FF0234\",\n    },\n    recovered:{\n        backcolor: \"#7dd71d\",\n        borderclr: \"#7dd72f\",\n    },\n    deaths: {\n        backcolor: \"#fb4443\",\n        borderclr: \"#FF0266\",\n    }\n}\n\n    return (\n        <div className={props.className}>\n            {lineData?.length > 0 && (\n            <Line \n                options={graph_optins}\n                data={\n                    {\n                        datasets: [\n                            {\n                                data: lineData,\n                                backgroundColor: `${backgroundoptions[extractype].backcolor}`,\n                                borderColor: `${backgroundoptions[extractype].borderclr}`,\n                            }\n                        ]\n                    }\n                }\n                />\n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraphs\n","import React from 'react';\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\nimport \"../css/Map.css\";\nimport {showMapData} from \"../utils/tools.js\";\n\n\nfunction Map({casesType, countries, center, zoom}) {\n    // console.log(\"google\", casesType);\n    console.log(countries, \"feature\")\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" \n                attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreeMap</a> contributions'/>\n            \n            {/* Loop through the countries to create the circle */}\n            \n            {showMapData(countries, casesType=casesType)}\n            </LeafletMap>\n\n        </div>\n    )\n}\n\nexport default Map\n","import React, {useState, useEffect} from 'react';\nimport {MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport \"../css/App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport InfoBoxes from '../components/InfoBoxes.js';\nimport Table from  \"../components/Table.js\";\nimport {sortData, prettyPrintStat} from \"../utils/tools.js\";\nimport LineGraphs from \"../components/LineGraphs\";\nimport Map from \"../components/Map.js\";\n\n//https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries, setCountries] = useState(['USA', 'UK', 'INDIA']);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat:34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setmapCountries] = useState([]);\n  const [CasesType,setCasesType] = useState(\"cases\");\n  // Here all Varibale Declaration is state\n\n\n  useEffect(() => {\n\n    console.log(\"Google\")\n\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n\n  }, []);\n\n\n  //UseEffect is used for run the method based on the condition\n  useEffect(() => {\n    //Runs When component is loads. Only one time \n    const getAllCountries = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response) => response.json())\n      .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }\n          ));\n          \n          const sorted_d = sortData(data);\n          setCountries(countries);\n          setTableData(sorted_d);\n          setmapCountries(data);\n      });\n    }\n\n    getAllCountries();\n  }, []);\n\n\n  //Listen the Selection Value \n  const Onchange = async (event) =>{\n    const countrycode = event.target.value;\n    // https://disease.sh/v3/covid-19/v3/covid-19/countries/{COUNTRY_CODE}\n    // https://disease.sh/v3/covid-19/all\n\n    const url = countrycode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : \n    `https://disease.sh/v3/covid-19/countries/${countrycode}`;\n\n    await fetch(url).then(response => response.json()).then(data => {\n      setCountryInfo(data);\n      setCountry(countrycode);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n\n      {/* Header */}\n      {/** Title + Selector Input Boxes */}\n      <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={Onchange}>\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              {\n                countries.map((country) => (<MenuItem value={country.value}>{country.name}</MenuItem>))\n              }\n            </Select>\n          </FormControl>\n      </div>\n\n      {/* InfoBoxes */}      \n      <div className=\"app__infoboxes\">\n      <InfoBoxes casesType={CasesType === \"cases\"} isRed onClick={(e) => setCasesType(\"cases\")} title=\"CornoVirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/> \n      <InfoBoxes active={CasesType === \"recovered\"} onClick={(e) => setCasesType(\"recovered\")} title=\"CornoVirus Recovered\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n      <InfoBoxes active={CasesType === \"deaths\"} isRed onClick={(e) => setCasesType(\"deaths\")} title=\"CornoVirus Deaths\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n      </div>\n\n      {/* Maps */}\n      <Map casesType={CasesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n\n      <Card className=\"app__right\">\n          {/* Tbales */}\n          <CardContent>\n            <h1>Live Cases by Country</h1>\n            <Table countries={tableData}/>\n          </CardContent>\n          {/* Graphs */}\n          <h3 className=\"graph__title\">Worldwide New {CasesType}</h3>\n          <LineGraphs extractype={CasesType} className=\"app__graphs\"/>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}